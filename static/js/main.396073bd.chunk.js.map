{"version":3,"sources":["components/ActorCardComponent.js","model/ActorModel.js","pages/ActorGalleryPage/ActorGalleryPage.js","App.js","reportWebVitals.js","index.js"],"names":["ActorCardComponent","Actor","fname","lname","birthday","image","IMBDLink","this","age","Date","getFullYear","ActorGalleryPage","React","useState","actors","setActors","useEffect","axios","get","then","response","data","map","plainActor","ActorModel","catch","error","console","filterText","setFilterText","sortBy","setSortBy","filteredActors","filter","actor","toLowerCase","includes","sort","actor1","actor2","Container","className","type","placeholder","value","onChange","e","target","style","display","padding","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAceA,I,gBCCAC,E,WAdX,WAAYC,EAAOC,EAAOC,EAAUC,EAAOC,GAAW,oBAClDC,KAAKL,MAAQA,EACbK,KAAKJ,MAAQA,EACbI,KAAKH,SAAWA,EAChBG,KAAKF,MAAQA,EACbE,KAAKD,SAAWA,E,uCAEpB,WACI,IACME,GADc,IAAIC,MAAOC,cACLH,KAAKH,SAAW,EAC1C,OAAOI,M,KC+EAG,MAlFf,WAA6B,IAAD,EAEIC,IAAMC,SAAS,IAFnB,mBAEjBC,EAFiB,KAETC,EAFS,KAKxBC,qBAAU,WACNC,IAAMC,IAAI,eAAeC,MAAK,SAAAC,GAC1BL,EAAUK,EAASC,KAAKC,KAAI,SAAAC,GAAU,OAAI,IAAIC,EAAWD,EAAWrB,MAAOqB,EAAWpB,MAAOoB,EAAWnB,SAAUmB,EAAWlB,MAAOkB,EAAWjB,iBAChJmB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,QAEnB,IAXqB,MAgBYd,IAAMC,SAAS,IAhB3B,mBAgBjBe,EAhBiB,KAgBLC,EAhBK,OAiBIjB,IAAMC,SAAS,SAjBnB,mBAiBjBiB,EAjBiB,KAiBTC,EAjBS,KAoBlBC,EAAiBlB,EAAOmB,QAAO,SAAAC,GAAK,OACtCA,EAAMhC,MAAMiC,cAAcC,SAASR,EAAWO,gBAC9CD,EAAM/B,MAAMgC,cAAcC,SAASR,EAAWO,kBAalD,OAVAH,EAAeK,MAAK,SAACC,EAAQC,GACzB,OAAID,EAAOR,GAAUS,EAAOT,GACjB,EACAQ,EAAOR,GAAUS,EAAOT,IACvB,EAED,KAKX,eAACU,EAAA,EAAD,CAAWC,UAAU,iBAArB,UACI,6CACA,gCACI,uBAAOC,KAAK,OAAOC,YAAY,gBAAgBF,UAAU,QACrDG,MAAOhB,EAAYiB,SAAU,SAAAC,GAAC,OAAIjB,EAAciB,EAAEC,OAAOH,UAE7D,yBAAQA,MAAOd,EAAQe,SAAU,SAAAC,GAAC,OAAIf,EAAUe,EAAEC,OAAOH,QAAQH,UAAU,QAA3E,UACI,wBAAQG,MAAM,QAAd,wBACA,wBAAQA,MAAM,QAAd,6BAGR,8BACI,oBAAII,MAAO,CAAEC,QAAS,OAAQC,QAAS,GAAvC,SACKlB,EAAeV,KAAI,SAAAY,GAAK,OAAI,gCAEzB,qBAAKiB,IAAKjB,EAAM7B,MAAO+C,IAAI,KAE3B,8BACKlB,EAAMhC,MAAQ,IAAMgC,EAAM/B,QAE/B,8BACK+B,EAAM9B,yBCrDpBiD,MARf,WACE,OACE,qBAAKZ,UAAU,YAAf,SACE,cAAC,EAAD,OCKSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.396073bd.chunk.js","sourcesContent":["import './ActorCardComponent.css'\r\n\r\n\r\nfunction ActorCardComponent({ fname, lname, birthday, image, IMBDLink }) {\r\n\r\n    return (\r\n        <div className=\"actor-card\">\r\n            <img src={image} />\r\n            <p>name: {fname, lname}</p>\r\n            <p>age: {birthday}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActorCardComponent;","class Actor {\r\n    constructor(fname, lname, birthday, image, IMBDLink) {\r\n        this.fname = fname;\r\n        this.lname = lname;\r\n        this.birthday = birthday;\r\n        this.image = image;\r\n        this.IMBDLink = IMBDLink;\r\n    }\r\n    age() {\r\n        const currentYear = new Date().getFullYear();\r\n        const age = currentYear - this.birthday + 1;\r\n        return age;\r\n    }\r\n}\r\n\r\nexport default Actor;","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './ActorGalleryPage.css'\r\nimport { Container } from 'react-bootstrap';\r\nimport ActorCardComponent from '../../components/ActorCardComponent';\r\nimport ActorModel from '../../model/ActorModel';\r\n\r\n\r\nfunction ActorGalleryPage() {\r\n\r\n    const [actors, setActors] = React.useState([]);\r\n\r\n    // We want to fetch the cars data from JSON only once the compoenent is mounting\r\n    useEffect(() => {\r\n        axios.get(\"actors.json\").then(response => {\r\n            setActors(response.data.map(plainActor => new ActorModel(plainActor.fname, plainActor.lname, plainActor.birthday, plainActor.image, plainActor.IMBDLink)));\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    const [filterText, setFilterText] = React.useState(\"\")\r\n    const [sortBy, setSortBy] = React.useState(\"fname\");\r\n\r\n    // 1) Filter the actors based on the filterText\r\n    const filteredActors = actors.filter(actor =>\r\n        actor.fname.toLowerCase().includes(filterText.toLowerCase()) ||\r\n        actor.lname.toLowerCase().includes(filterText.toLowerCase()));\r\n\r\n    // 2) Sort the actors array\r\n    filteredActors.sort((actor1, actor2) => {\r\n        if (actor1[sortBy] > actor2[sortBy]) {\r\n            return 1;\r\n        } else if (actor1[sortBy] < actor2[sortBy]) {\r\n            return -1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Container className=\"p-actorGallery\">\r\n            <h1>Actors Page</h1>\r\n            <div>\r\n                <input type=\"text\" placeholder=\"Filter actors\" className=\"col-9\"\r\n                    value={filterText} onChange={e => setFilterText(e.target.value)} />\r\n\r\n                <select value={sortBy} onChange={e => setSortBy(e.target.value)} className=\"col-3\">\r\n                    <option value=\"fname\">First Name</option>\r\n                    <option value=\"lname\">Last Name</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <ul style={{ display: \"flex\", padding: 0 }}>\r\n                    {filteredActors.map(actor => <div>\r\n\r\n                        <img src={actor.image} alt=\"\" />\r\n\r\n                        <div>\r\n                            {actor.fname + \" \" + actor.lname}\r\n                        </div>\r\n                        <div>\r\n                            {actor.birthday}\r\n                        </div>\r\n\r\n                    </div>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n\r\n            {/* <ul>\r\n                {filteredActors.map(actor => <li>\r\n                    {actor.fname + \" \" + actor.lname}</li>)}\r\n            </ul> */}\r\n\r\n\r\n            {/* <ActorCardComponent img=\"https://i.pinimg.com/474x/7b/42/c5/7b42c553d66d8b58970fadb14ead5f69.jpg\"\r\n                name=\"aaaaa\" age=\"11\" />\r\n            <ActorCardComponent img=\"https://i.pinimg.com/474x/7b/42/c5/7b42c553d66d8b58970fadb14ead5f69.jpg\"\r\n                name=\"bbbbb\" age=\"22\" />\r\n            <ActorCardComponent img=\"https://i.pinimg.com/474x/7b/42/c5/7b42c553d66d8b58970fadb14ead5f69.jpg\"\r\n                name=\"ccccc\" age=\"33\" /> */}\r\n        </Container >\r\n\r\n    )\r\n}\r\n\r\nexport default ActorGalleryPage;\r\n","import './App.css';\nimport ActorGalleryPage from './pages/ActorGalleryPage/ActorGalleryPage';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <ActorGalleryPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}